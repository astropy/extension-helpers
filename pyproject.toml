[project]
name = "extension-helpers"
authors = [{name = "The Astropy Developers", email = "astropy.team@gmail.com"}]
license = {text = "BSD 3-Clause License"}
description = "Utilities for building and installing packages with compiled extensions"
readme = "README.rst"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Framework :: Setuptools Plugin",
    "License :: OSI Approved :: BSD License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Topic :: Software Development :: Build Tools",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Archiving :: Packaging",
]
requires-python = ">=3.10"
dependencies = [
    "setuptools>=64",
    "tomli>=1.0.0 ; python_version < '3.11'",
]
dynamic = ["version"]

[project.urls]
Homepage = "https://github.com/astropy/extension-helpers"

[project.entry-points."setuptools.finalize_distribution_options"]
extension_helpers_get_extensions = "extension_helpers:_finalize_distribution_hook"

[project.optional-dependencies]
test = [
    "wheel",
    "pytest",
    "pytest-cov",
    "cython",
    "build"
]
docs = [
    "sphinx",
    "sphinx-automodapi",
]

[tool.setuptools]
zip-safe = false
provides = ["extension_helpers"]
license-files = ["LICENSE.rst"]
include-package-data = false

[tool.setuptools.packages]
find = {namespaces = false}

[tool.setuptools.package-data]
extension_helpers = ["src/compiler.c"]

[tool.pytest.ini_options]
minversion = "6"
addopts = ["-ra", "--strict-config", "--strict-markers"]
log_cli_level = "INFO"
xfail_strict = true
testpaths = ['"extension_helpers"', '"docs"']
norecursedirs = ["build", "docs/_build"]
markers = ["flaky"]
filterwarnings = ["error"]

[tool.coverage.run]
omit = [
    "extension_helpers/*/setup_package.py",
    "extension_helpers/tests/*",
    "extension_helpers/conftest.py",
    "*/extension_helpers/*/setup_package.py",
    "*/extension_helpers/tests/*",
    "*/extension_helpers/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",
    # Don't complain about packages we have installed
    "except ImportError",
    # Don't complain if tests don't hit assertions
    "raise AssertionError",
    "raise NotImplementedError",
    # Don't complain about script hooks
    'def main\(.*\):',
    # Ignore branches that don't pertain to this version of Python
    "pragma: py{ignore_python_version}",
    # Don't complain about IPython completion helper
    "def _ipython_key_completions_",
]

[build-system]
requires = ["setuptools>=43.0.0",
            "setuptools_scm>=6.2"]
build-backend = 'setuptools.build_meta'

[tool.setuptools_scm]
write_to = "extension_helpers/version.py"

[tool.isort]
profile = "black"
multi_line_output = 3
extend_skip_glob = [
    "docs/*",
    "setup.py"]
line_length = 100
known_third_party = ["astropy"]
known_first_party = ["reproject"]
group_by_package = true
indented_import_headings = false
length_sort_sections = ["future", "stdlib"]

[tool.black]
line-length = 100
target-version = ['py38']


[tool.numpydoc_validation]
checks = [
    "all",   # report on all checks, except the below
    "EX01",
    "SA01",
    "SS06",
    "ES01",
    "GL08",
]

[tool.repo-review]
ignore = [
    "MY",    # ignore MyPy setting checks
    "GH102", # auto-cancel of PRs
    "PC111", # ignore using `blacken-docs` in pre-commit
    "PC140", # ignore using `mypy` in pre-commit
    "PC180", # ignore using `prettier` in pre-commit
    "PC901", # ignore using custom update message (we have many of the default ones in our history already)
    "PC170", # ignore using pygrep
    "PY005", # ignore having a tests/ folder
]

[tool.ruff]

[tool.ruff.lint]
extend-select = [
  "B",  # flake8-bugbear
  "I",  # isort
  "UP",  # pyupgrade
]

[tool.ruff.lint.extend-per-file-ignores]
"docs/conf.py" = ["F405"]  # Sphinx injects variables into namespace
"extension_helpers/_openmp_helpers.py" = ["UP032"]  # Avoid using f-strings in logger
[tool.codespell]
ignore-words-list = """
    ccompiler,
"""
